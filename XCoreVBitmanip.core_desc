import "../rv_base/RISCVBase.core_desc"

InstructionSet XCoreVBitmanip extends RISCVBase {
    instructions {
        // SOURCE FILE: instr_srcs/XCoreVALU_BitmanipI.txt
        CV_EXTRACT {
            encoding: 2'b00 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1011011;
            assembly: {"cv.extract", "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned<XLEN>)((signed<32>)(((X[rs1] >> Iuimm5) & ((2 << Luimm5) - 1)) << (31 - Luimm5)) >> (31 - Luimm5));
                }
            }
        }
        CV_EXTRACTU {
            encoding: 2'b01 :: Luimm5[4:0] :: Iuimm5[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b1011011;
            assembly: {"cv.extractu", "{name(rd)}, {name(rs1)}, {Luimm5}, {Iuimm5}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned)((X[rs1] >> Iuimm5) & ((2 << Luimm5) - 1));
                }
            }
        }
        CV_EXTRACTR {
            encoding: 7'b0011000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.extractr", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned<XLEN>)((signed<32>)(((X[rs1] >> X[rs2][31: 0][4:0]) & ((2 << X[rs2][31: 0][9:5]) - 1)) << (31 - X[rs2][31: 0][9:5])) >> (31 - X[rs2][31: 0][9:5]));
                }
            }
        }
        CV_EXTRACTUR {
            encoding: 7'b0011001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.extractur", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) {
                    X[rd] = (unsigned)((X[rs1] >> X[rs2][31: 0][4:0]) & ((2 << X[rs2][31: 0][9:5]) - 1));
                }
            }
        }
    }
}
